// ==================== 高级功能综合测试 ====================

print("=== 高级功能综合测试 ===
");

// 1. 类和结构体
print("1. 类和结构体:");
class Student {
    public string name;
    public int age;
    public int grade;
}

struct Person {
    string name;
    int age;
}

let student1 = Student("Alice", 20, 85);
print("Student: " + student1.name + ", Age: " + student1.age + ", Grade: " + student1.grade);

let person1 = Person("John", 25);
print("Person: " + person1.name + ", Age: " + person1.age);
print("
");

// 2. 异常处理
print("2. 异常处理:");
function testException() {
    try {
        let x = 10 / 0;
    } catch (error) {
        print("Caught division by zero: " + error);
    }
}

function testException2() {
    try {
        let arr = [1, 2, 3];
        let value = arr[10];
    } catch (error) {
        print("Caught array index error: " + error);
    }
}

testException();
testException2();
print("
");

// 3. 复杂函数
print("3. 复杂函数:");
function factorial(n) {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

function fibonacci(n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

print("factorial(5) = " + factorial(5));
print("fibonacci(8) = " + fibonacci(8));
print("
");

// 4. 嵌套控制结构
print("4. 嵌套控制结构:");
for (let i = 0; i < 3; i = i + 1) {
    print("Outer loop i = " + i);
    for (let j = 0; j < 2; j = j + 1) {
        print("  Inner loop j = " + j);
        if (i == 1 && j == 1) {
            print("    Breaking inner loop");
            break;
        }
    }
}

let k = 0;
while (k < 5) {
    if (k == 2) {
        k = k + 1;
        continue;
    }
    print("while loop k = " + k);
    k = k + 1;
}
print("
");

// 5. 复杂表达式和运算符优先级
print("5. 复杂表达式和运算符优先级:");
let a = 10;
let b = 3;
let c = 7;
print("a = " + a + ", b = " + b + ", c = " + c);
print("a + b * c = " + (a + b * c));
print("(a + b) * c = " + ((a + b) * c));
print("a + b + c = " + (a + b + c));
print("a * b + c = " + (a * b + c));
print("a & b | c = " + (a & b | c));
print("a ^ b << 1 = " + (a ^ b << 1));
print("
");

// 6. 字符串和数组的高级操作
print("6. 字符串和数组的高级操作:");
let str1 = "Hello";
let str2 = "World";
let combined = str1 + " " + str2;
print("Combined string: " + combined);

let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];
print("Array 1: " + arr1);
print("Array 2: " + arr2);
print("Array 1 count: " + count(arr1));
print("Array 2 count: " + count(arr2));
print("
");

// 7. 字典操作
print("7. 字典操作:");
let dict = {"name": "Alice", "age": 25, "city": "New York"};
print("Dictionary: " + dict);
print("Name: " + dict["name"]);
print("Age: " + dict["age"]);
print("City: " + dict["city"]);
print("
");

print("=== 高级功能测试完成 ===
");
