// 测试结构体和类功能

// 定义结构体
struct Person {
    string name;
    int age;
    string city;
}

// 定义类
class Student {
    public string name;
    public int age;
    public int grade;
    
    function getInfo() {
        return "Student: " + name + ", Age: " + age + ", Grade: " + grade;
    }
    
    function setGrade(newGrade) {
        grade = newGrade;
    }
}

// 定义继承类
class GraduateStudent : Student {
    public string major;
    public string advisor;
    
    function getInfo() {
        return "Graduate Student: " + name + ", Major: " + major + ", Advisor: " + advisor;
    }
}

// 测试结构体实例化
let person1 = Person {name: "John", age: 25, city: "New York"};
print("Person: " + person1.name + ", Age: " + person1.age + ", City: " + person1.city + "\n");

// 测试类实例化
let student1 = Student("Alice", 20, 85);
print("Student: " + student1.name + ", Age: " + student1.age + ", Grade: " + student1.grade + "\n");

// 测试方法调用
let info = student1.getInfo();
print(info + "\n");

// 测试方法调用修改成员
student1.setGrade(90);
print("Updated grade: " + student1.grade + "\n");

// 测试继承类
let gradStudent = GraduateStudent("Bob", 25, 88);
gradStudent.major = "Computer Science";
gradStudent.advisor = "Dr. Smith";
print(gradStudent.getInfo() + "\n");

// 测试成员访问
print("Student name: " + student1.name + "\n");
print("Graduate student major: " + gradStudent.major + "\n");
